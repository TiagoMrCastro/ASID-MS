
---
# locust-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: locust-script
data:
  locustfile.py: |
    from locust import HttpUser, task, between
    import random, uuid, json

    class MicroserviceTestUser(HttpUser):
        wait_time = between(1, 3)

        def on_start(self):
            self.headers = {"Content-Type": "application/json"}

        @task
        def get_books(self):
            self.client.get("/books", headers=self.headers)

        @task
        def register_user(self):
            unique_id = str(uuid.uuid4())[:8]
            username = f"locust_{unique_id}"
            email = f"{username}@mail.com"
            fullname = f"Locust Test User {random.randint(1, 1000)}"
            password = "abc123"

            payload = {
                "username": username,
                "email": email,
                "fullname": fullname,
                "password": password
            }

            with self.client.post("/auth/register", json=payload, catch_response=True) as response:
                if response.status_code == 200:
                    response.success()
                elif response.status_code == 409:
                    response.failure("Utilizador ou e-mail j√° existe.")
                else:
                    response.failure(f"Erro inesperado: {response.status_code} - {response.text}")

        @task
        def add_to_cart(self):
            payload = {
                "userId": 1,
                "bookId": 2,
                "quantity": random.randint(1, 3)
            }

            with self.client.post("/cart/add", json=payload, catch_response=True) as response:
                if response.status_code == 200:
                    response.success()
                else:
                    response.failure(f"Erro: {response.status_code} - {response.text}")


        @task
        def get_order_history_details(self):
            user_id = 1
            from_date = "2024-01-01"
            to_date = "2024-12-31"

            with self.client.get(
                f"/history/{user_id}/details",
                params={"from": from_date, "to": to_date},
                catch_response=True
            ) as response:
                if response.status_code == 200:
                    response.success()
                else:
                    response.failure(f"Erro {response.status_code} - {response.text}")

---
# locust-master.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locust
      role: master
  template:
    metadata:
      labels:
        app: locust
        role: master
    spec:
      containers:
        - name: locust
          image: locustio/locust
          args: ["-f", "/mnt/locust/locustfile.py", "--master"]
          ports:
            - containerPort: 8089
            - containerPort: 5557
            - containerPort: 5558
          volumeMounts:
            - name: locustfile
              mountPath: /mnt/locust
      volumes:
        - name: locustfile
          configMap:
            name: locust-script
---
# locust-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: locust
      role: worker
  template:
    metadata:
      labels:
        app: locust
        role: worker
    spec:
      containers:
        - name: locust
          image: locustio/locust
          args: ["-f", "/mnt/locust/locustfile.py", "--worker", "--master-host=locust-master"]
          volumeMounts:
            - name: locustfile
              mountPath: /mnt/locust
      volumes:
        - name: locustfile
          configMap:
            name: locust-script
---
# locust-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: locust-master
spec:
  type: LoadBalancer
  selector:
    app: locust
    role: master
  ports:
    - name: web-ui
      port: 8089
      targetPort: 8089
    - name: master-bind
      port: 5557
      targetPort: 5557
    - name: master-bind2
      port: 5558
      targetPort: 5558

